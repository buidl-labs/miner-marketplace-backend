# GraphQL schema

type Query {
  miner(id: ID!): Miner
  miners(first: Int, offset: Int): [Miner!]!
  networkStats: NetworkStats!
}

####################################
# types
####################################

type NetworkStats {
  activeMinersCount: Int!
  networkStorageCapacity: String!
  dataStored: String!
}

type Miner {
  id: ID!
  claimed: Boolean!
  onboarded: Boolean
  personalInfo: PersonalInfo @goField(forceResolver: true) # filled by miner
  worker: Worker @goField(forceResolver: true)
  owner: Owner @goField(forceResolver: true)
  location: Location @goField(forceResolver: true) # by default, fetch from filrep (can be edited by miner)
  qualityAdjustedPower: String! @goField(forceResolver: true)
  service: Service @goField(forceResolver: true) # by default, fetch from filrep (can be edited by miner)
  pricing: Pricing @goField(forceResolver: true) # by default, fetch from filrep (can be edited by miner)
  reputationScore: Int! @goField(forceResolver: true)
  transparencyScore: Int! @goField(forceResolver: true)
  storageDealStats: StorageDealStats! @goField(forceResolver: true)
  transactions(
    first: Int
    offset: Int
    filter: TransactionsFilter
    orderBy: TransactionsOrderBy
  ): [Transaction!]! @goField(forceResolver: true)
  aggregateEarnings(
    startHeight: Int!
    endHeight: Int!
    transactionTypes: [Boolean!]
    includeGas: Boolean!
  ): AggregateEarnings! @goField(forceResolver: true)
  estimatedEarnings(
    days: Int!
    transactionTypes: [Boolean!]
    includeGas: Boolean!
  ): EstimatedEarnings! @goField(forceResolver: true)
}

type AggregateEarnings {
  income: AggregateIncome! @goField(forceResolver: true)
  expenditure: AggregateExpenditure! @goField(forceResolver: true)
  netEarnings: String! @goField(forceResolver: true)
}

type AggregateIncome {
  total: String! @goField(forceResolver: true)
  storageDealPayments: String! @goField(forceResolver: true)
  blockRewards: String! @goField(forceResolver: true)
}

type AggregateExpenditure {
  total: String! @goField(forceResolver: true)
  collateralDeposit: String! @goField(forceResolver: true)
  gas: String! @goField(forceResolver: true)
  penalty: String! @goField(forceResolver: true)
  others: String! @goField(forceResolver: true)
}

type EstimatedEarnings {
  income: EstimatedIncome! @goField(forceResolver: true)
  expenditure: EstimatedExpenditure! @goField(forceResolver: true)
  netEarnings: String! @goField(forceResolver: true)
}

type EstimatedIncome {
  total: String! @goField(forceResolver: true)
  storageDealPayments: StorageDealPayments! @goField(forceResolver: true)
  blockRewards: BlockRewards! @goField(forceResolver: true)
}

type StorageDealPayments {
  existingDeals: String! @goField(forceResolver: true)
  potentialFutureDeals: String! @goField(forceResolver: true)
}

type BlockRewards {
  blockRewards: String! @goField(forceResolver: true) # "0" if not eligible
  daysUntilEligible: Int! @goField(forceResolver: true) # 0 if eligible
}

type EstimatedExpenditure {
  total: String! @goField(forceResolver: true)
  collateralDeposit: String! @goField(forceResolver: true)
  gas: String! @goField(forceResolver: true)
  penalty: String! @goField(forceResolver: true)
  others: String! @goField(forceResolver: true)
}

type StorageDealStats {
  averagePrice: String!
  dataStored: String!
  faultTerminated: Int!
  noPenalties: Int!
  slashed: Int!
  successRate: String!
  terminated: Int!
  total: Int!
}

type PersonalInfo {
  name: String! @goField(forceResolver: true)
  bio: String! @goField(forceResolver: true)
  email: String! @goField(forceResolver: true)
  website: String! @goField(forceResolver: true)
  twitter: String! @goField(forceResolver: true)
  slack: String! @goField(forceResolver: true)
}

type Worker {
  id: ID!
  address: String!
  miner: Miner @goField(forceResolver: true)
}

type Owner {
  id: ID!
  address: String!
  miner: Miner @goField(forceResolver: true)
}

type Location {
  region: String! @goField(forceResolver: true)
  country: String! @goField(forceResolver: true)
}

type Service {
  serviceTypes: ServiceTypes @goField(forceResolver: true)
  dataTransferMechanism: DataTransferMechanism @goField(forceResolver: true)
}

type ServiceTypes {
  storage: Boolean! # default: true
  retrieval: Boolean! # default: true
  repair: Boolean! # default: false
}

type DataTransferMechanism {
  online: Boolean! # default: true
  offline: Boolean! # default: false
}

type Pricing {
  storageAskPrice: String! @goField(forceResolver: true)
  verifiedAskPrice: String! @goField(forceResolver: true)
  retrievalAskPrice: String! @goField(forceResolver: true)
}

type Transaction {
  id: ID!
  miner: Miner @goField(forceResolver: true)
  height: Int!
  timestamp: Int!
  transactionType: String!
  methodName: String!
  value: String!
  minerFee: String!
  burnFee: String!
  from: String!
  to: String!
  exitCode: Int!
  deals: [Int!]
}

####################################
# inputs
####################################

input ProfileSettingsInput {
  minerID: ID!
  ledgerAddress: String!

  name: String!
  bio: String!
  email: String!
  website: String!
  twitter: String!
  slack: String!

  # region: String!
  # country: String!

  storage: Boolean!
  retrieval: Boolean!
  repair: Boolean!

  online: Boolean!
  offline: Boolean!

  # storageAskPrice: String!
  # verifiedAskPrice: String!
  # retrievalAskPrice: String!
}

input ProfileClaimInput {
  minerID: ID!
  ledgerAddress: String!
}

input TransactionsFilter {
  or: Boolean! # take OR of all the below filters (if false, then take AND)
  id: ID
  minTimestamp: Int
  maxTimestamp: Int
  minValue: String
  maxValue: String
  transactionType: String
  methodName: String
  from: String
  to: String
  exitCode: Int
}

input TransactionsOrderBy {
  param: TransactionsOrderByParam!
  sort: Sort!
}

####################################
# enums
####################################

enum TransactionsOrderByParam {
  timestamp
  value
  minerFee
  burnFee
}

enum Sort {
  ASC
  DESC
}

####################################
# mutations
####################################

type Mutation {
  claimProfile(input: ProfileClaimInput!): Boolean! # true: success, false: failure
  editProfile(input: ProfileSettingsInput!): Boolean! # true: updated, false: failed
  verifyWallet(
    minerID: String!
    walletAddress: String!
    hexMessage: String!
    signature: String!
  ): Boolean! # true: success, false: failure
}

####################################
# directives
####################################

directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
