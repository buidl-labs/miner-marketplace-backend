// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AggregateEarnings struct {
	Income      *AggregateIncome      `json:"income"`
	Expenditure *AggregateExpenditure `json:"expenditure"`
	NetEarnings string                `json:"netEarnings"`
}

type AggregateExpenditure struct {
	Total             string `json:"total"`
	CollateralDeposit string `json:"collateralDeposit"`
	Gas               string `json:"gas"`
	Penalty           string `json:"penalty"`
	Others            string `json:"others"`
}

type AggregateIncome struct {
	Total               string `json:"total"`
	StorageDealPayments string `json:"storageDealPayments"`
	BlockRewards        string `json:"blockRewards"`
}

type BlockRewards struct {
	BlockRewards      string `json:"blockRewards"`
	DaysUntilEligible int    `json:"daysUntilEligible"`
}

type DataTransferMechanism struct {
	Online  bool `json:"online"`
	Offline bool `json:"offline"`
}

type EstimatedEarnings struct {
	Income      *EstimatedIncome      `json:"income"`
	Expenditure *EstimatedExpenditure `json:"expenditure"`
	NetEarnings string                `json:"netEarnings"`
}

type EstimatedExpenditure struct {
	Total             string `json:"total"`
	CollateralDeposit string `json:"collateralDeposit"`
	Gas               string `json:"gas"`
	Penalty           string `json:"penalty"`
	Others            string `json:"others"`
}

type EstimatedIncome struct {
	Total               string               `json:"total"`
	StorageDealPayments *StorageDealPayments `json:"storageDealPayments"`
	BlockRewards        *BlockRewards        `json:"blockRewards"`
}

type Location struct {
	Region  string `json:"region"`
	Country string `json:"country"`
}

type Miner struct {
	ID                   string             `json:"id"`
	Claimed              bool               `json:"claimed"`
	Onboarded            *bool              `json:"onboarded"`
	PersonalInfo         *PersonalInfo      `json:"personalInfo"`
	Worker               *Worker            `json:"worker"`
	Owner                *Owner             `json:"owner"`
	Location             *Location          `json:"location"`
	QualityAdjustedPower string             `json:"qualityAdjustedPower"`
	Service              *Service           `json:"service"`
	Pricing              *Pricing           `json:"pricing"`
	ReputationScore      int                `json:"reputationScore"`
	TransparencyScore    int                `json:"transparencyScore"`
	StorageDealStats     *StorageDealStats  `json:"storageDealStats"`
	Transactions         []*Transaction     `json:"transactions"`
	AggregateEarnings    *AggregateEarnings `json:"aggregateEarnings"`
	EstimatedEarnings    *EstimatedEarnings `json:"estimatedEarnings"`
}

type NetworkStats struct {
	ActiveMinersCount       int    `json:"activeMinersCount"`
	NetworkStorageCapacity  string `json:"networkStorageCapacity"`
	DataStored              string `json:"dataStored"`
	TopMinerBlockRewards24h string `json:"topMinerBlockRewards24H"`
	TotalBlockRewards24h    string `json:"totalBlockRewards24H"`
	AverageDealPrice        string `json:"averageDealPrice"`
}

type Owner struct {
	ID      string `json:"id"`
	Address string `json:"address"`
	Miner   *Miner `json:"miner"`
}

type PersonalInfo struct {
	Name    string `json:"name"`
	Bio     string `json:"bio"`
	Email   string `json:"email"`
	Website string `json:"website"`
	Twitter string `json:"twitter"`
	Slack   string `json:"slack"`
}

type Pricing struct {
	StorageAskPrice   string `json:"storageAskPrice"`
	VerifiedAskPrice  string `json:"verifiedAskPrice"`
	RetrievalAskPrice string `json:"retrievalAskPrice"`
}

type ProfileClaimInput struct {
	MinerID       string `json:"minerID"`
	LedgerAddress string `json:"ledgerAddress"`
}

type ProfileSettingsInput struct {
	MinerID       string `json:"minerID"`
	LedgerAddress string `json:"ledgerAddress"`
	Name          string `json:"name"`
	Bio           string `json:"bio"`
	Email         string `json:"email"`
	Website       string `json:"website"`
	Twitter       string `json:"twitter"`
	Slack         string `json:"slack"`
	Storage       bool   `json:"storage"`
	Retrieval     bool   `json:"retrieval"`
	Repair        bool   `json:"repair"`
	Online        bool   `json:"online"`
	Offline       bool   `json:"offline"`
}

type Service struct {
	ServiceTypes          *ServiceTypes          `json:"serviceTypes"`
	DataTransferMechanism *DataTransferMechanism `json:"dataTransferMechanism"`
}

type ServiceTypes struct {
	Storage   bool `json:"storage"`
	Retrieval bool `json:"retrieval"`
	Repair    bool `json:"repair"`
}

type StorageDealPayments struct {
	ExistingDeals        string `json:"existingDeals"`
	PotentialFutureDeals string `json:"potentialFutureDeals"`
}

type StorageDealStats struct {
	AveragePrice    string `json:"averagePrice"`
	DataStored      string `json:"dataStored"`
	FaultTerminated int    `json:"faultTerminated"`
	NoPenalties     int    `json:"noPenalties"`
	Slashed         int    `json:"slashed"`
	SuccessRate     string `json:"successRate"`
	Terminated      int    `json:"terminated"`
	Total           int    `json:"total"`
}

type Transaction struct {
	ID              string `json:"id"`
	Miner           *Miner `json:"miner"`
	Height          int    `json:"height"`
	Timestamp       int    `json:"timestamp"`
	TransactionType string `json:"transactionType"`
	MethodName      string `json:"methodName"`
	Value           string `json:"value"`
	MinerFee        string `json:"minerFee"`
	BurnFee         string `json:"burnFee"`
	From            string `json:"from"`
	To              string `json:"to"`
	ExitCode        int    `json:"exitCode"`
	Deals           []int  `json:"deals"`
}

type TransactionsFilter struct {
	Or              bool    `json:"or"`
	ID              *string `json:"id"`
	MinTimestamp    *int    `json:"minTimestamp"`
	MaxTimestamp    *int    `json:"maxTimestamp"`
	MinValue        *string `json:"minValue"`
	MaxValue        *string `json:"maxValue"`
	TransactionType *string `json:"transactionType"`
	MethodName      *string `json:"methodName"`
	From            *string `json:"from"`
	To              *string `json:"to"`
	ExitCode        *int    `json:"exitCode"`
}

type TransactionsOrderBy struct {
	Param TransactionsOrderByParam `json:"param"`
	Sort  Sort                     `json:"sort"`
}

type Worker struct {
	ID      string `json:"id"`
	Address string `json:"address"`
	Miner   *Miner `json:"miner"`
}

type Sort string

const (
	SortAsc  Sort = "ASC"
	SortDesc Sort = "DESC"
)

var AllSort = []Sort{
	SortAsc,
	SortDesc,
}

func (e Sort) IsValid() bool {
	switch e {
	case SortAsc, SortDesc:
		return true
	}
	return false
}

func (e Sort) String() string {
	return string(e)
}

func (e *Sort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Sort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Sort", str)
	}
	return nil
}

func (e Sort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionsOrderByParam string

const (
	TransactionsOrderByParamTimestamp TransactionsOrderByParam = "timestamp"
	TransactionsOrderByParamValue     TransactionsOrderByParam = "value"
	TransactionsOrderByParamMinerFee  TransactionsOrderByParam = "minerFee"
	TransactionsOrderByParamBurnFee   TransactionsOrderByParam = "burnFee"
)

var AllTransactionsOrderByParam = []TransactionsOrderByParam{
	TransactionsOrderByParamTimestamp,
	TransactionsOrderByParamValue,
	TransactionsOrderByParamMinerFee,
	TransactionsOrderByParamBurnFee,
}

func (e TransactionsOrderByParam) IsValid() bool {
	switch e {
	case TransactionsOrderByParamTimestamp, TransactionsOrderByParamValue, TransactionsOrderByParamMinerFee, TransactionsOrderByParamBurnFee:
		return true
	}
	return false
}

func (e TransactionsOrderByParam) String() string {
	return string(e)
}

func (e *TransactionsOrderByParam) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionsOrderByParam(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionsOrderByParam", str)
	}
	return nil
}

func (e TransactionsOrderByParam) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
